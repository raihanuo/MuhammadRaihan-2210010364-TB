package view;

import dao.FlightDAO;
import dao.TicketDAO;
import java.io.File;
import model.Flight;
import model.Ticket;
import util.Database;
import util.ReportGenerator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.util.List;
import java.util.Map;
import javax.swing.filechooser.FileNameExtensionFilter;

public class TicketManagementFrame extends javax.swing.JFrame {
    private FlightDAO flightDao;
    private TicketDAO ticketDao;
    private ReportGenerator reportGenerator;
    private DefaultTableModel ticketTableModel;
    public TicketManagementFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setupDatabase();
        initializeTable();
        loadTickets();

        btnSave.addActionListener(e -> saveTicket());
        btnUpdate.addActionListener(e -> updateTicket());
        btnDelete.addActionListener(e -> deleteTicket());
        btnReport.addActionListener(e -> generateTicketReport());
        btnFlightForm.addActionListener(e -> {
            new FlightManagementFrame().setVisible(true);
            dispose();
        });
        btnTransactionForm.addActionListener(e -> {
            new TransactionManagementFrame().setVisible(true);
            dispose();
        });
        try {
            Connection connection = Database.getConnection();
            flightDao = new FlightDAO(connection);
            loadFlightCodes();
//            checkComboBox();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menghubungkan ke database: " + e.getMessage());
            e.printStackTrace();
        }
        this.reportGenerator = new ReportGenerator();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTicketID = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        cmbFlightCode = new javax.swing.JComboBox<>();
        txtTicketCount = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ticketTable = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFlightForm = new javax.swing.JButton();
        btnTransactionForm = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Form Tiket");

        labelTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Form Tiket");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("ID Tiket");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Nama Penumpang");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Kode Penerbangan");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Jumlah Tiket");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Harga");

        txtTicketID.setEditable(false);
        txtTicketID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTicketID.setEnabled(false);

        txtCustomerName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cmbFlightCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtTicketCount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        ticketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Tiket", "Nama Penumpang", "Kode Penerbangan", "Jumlah Tiket", "Harga"
            }
        ));
        jScrollPane1.setViewportView(ticketTable);

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setText("Tambah");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdate.setText("Ubah");

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDelete.setText("Hapus");

        btnFlightForm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFlightForm.setText("Form Penerbangan");

        btnTransactionForm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTransactionForm.setText("Form Transaksi");

        btnReport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnReport.setText("Laporan");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnFlightForm, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTransactionForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtCustomerName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbFlightCode, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTicketCount)
                                .addComponent(txtTicketID))
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1)
                    .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnSave))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtTicketID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbFlightCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTicketCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(btnReport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFlightForm)
                    .addComponent(btnTransactionForm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadFlightCodes() {
        try {
            List<Flight> flights = flightDao.getAllFlightCodes();
            cmbFlightCode.removeAllItems();
            for (Flight flight : flights) {
                cmbFlightCode.addItem(flight.getFlightCode());
            }
        } catch (Exception e) {
            System.out.println("Gagal mendapatkan kode penerbangan! " + e.getMessage());
        }
    }
        
    private void setupDatabase() {
        try {
            Connection connection = Database.getConnection();
            ticketDao = new TicketDAO(connection);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Koneksi Database Gagal: " + e.getMessage());
        }
    }

    private void initializeTable() {
        ticketTableModel = new DefaultTableModel(new String[]{"ID Tiket", "Nama Penumpang", "Kode Penerbangan", "Jumlah Tiket", "Harga"}, 0);
        ticketTable.setModel(ticketTableModel);
        for (int column = 0; column < ticketTable.getColumnCount(); column++) {
            int headerWidth = ticketTable.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(ticketTable, ticketTable.getColumnName(column), false, false, 0, column)
                    .getPreferredSize().width;
            ticketTable.getColumnModel().getColumn(column).setPreferredWidth(headerWidth);
        }       
        ticketTable.getSelectionModel().addListSelectionListener(event -> {
            int selectedRow = ticketTable.getSelectedRow();
            if (selectedRow != -1) {
                String ticketId = ticketTable.getValueAt(selectedRow, 0).toString();
                String customerName = ticketTable.getValueAt(selectedRow, 1).toString();
                String flightCode = ticketTable.getValueAt(selectedRow, 2).toString();
                String ticketCount = ticketTable.getValueAt(selectedRow, 3).toString();
                String price = ticketTable.getValueAt(selectedRow, 4).toString();

                txtTicketID.setText(ticketId);
                txtCustomerName.setText(customerName);
                cmbFlightCode.setSelectedItem(flightCode);
                txtTicketCount.setText(ticketCount);
                txtPrice.setText(price);
            }
        });
    }

    private void loadTickets() {
        try {
            List<Map<String, Object>> tickets = ticketDao.getAllTickets();
            ticketTableModel.setRowCount(0);
            for (Map<String, Object> ticket : tickets) {
                ticketTableModel.addRow(new Object[]{
                    ticket.get("ticket_id"),
                    ticket.get("customer_name"),
                    ticket.get("flight_code"),
                    ticket.get("ticket_count"),
                    ticket.get("price")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat tiket: " + e.getMessage());
        }
    }

    private void saveTicket() {
        try {
            if (txtCustomerName.getText().isEmpty() ||
                cmbFlightCode.getSelectedItem() == null || 
                cmbFlightCode.getSelectedItem().toString().isEmpty() ||
                txtTicketCount.getText().isEmpty() ||
                txtPrice.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Semua data harus terisi sebelum menambah tiket.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Ticket ticket = new Ticket(
                txtCustomerName.getText(),
                cmbFlightCode.getSelectedItem().toString(),
                Integer.parseInt(txtTicketCount.getText()),
                Integer.parseInt(txtPrice.getText())
            );
            ticketDao.addTicket(ticket);
            loadTickets();
            JOptionPane.showMessageDialog(this, "Tiket berhasil ditambahkan!");
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan tiket: " + e.getMessage());
        }
    }

    private void updateTicket() {
        int selectedRow = ticketTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih tiket yang ingin diperbarui!");
            return;
        }
        try {
            String id = ticketTable.getValueAt(selectedRow, 0).toString();

            Ticket ticket = new Ticket(
                txtCustomerName.getText(),
                cmbFlightCode.getSelectedItem().toString(),
                Integer.parseInt(txtTicketCount.getText()),
                Integer.parseInt(txtPrice.getText())
            );
            ticketDao.updateTicket(Integer.parseInt(id), ticket);
            loadTickets();
            JOptionPane.showMessageDialog(this, "Tiket berhasil diperbarui!");
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memperbarui tiket: " + e.getMessage());
        }
    }

    private void deleteTicket() {
        int selectedRow = ticketTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih tiket yang ingin dihapus!");
            return;
        }
        try {
            int ticketId = Integer.parseInt(ticketTableModel.getValueAt(selectedRow, 0).toString());
            ticketDao.deleteTicket(ticketId);
            loadTickets();
            JOptionPane.showMessageDialog(this, "Tiket berhasil dihapus!");
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus tiket: " + e.getMessage());
        }
    }

    private void generateTicketReport() {
        if (ticketTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada tiket untuk disimpan ke laporan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
                
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih Lokasi untuk Menyimpan Laporan Tiket");
        
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));
        fileChooser.setSelectedFile(new File("laporan_tiket"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                if (!fileToSave.getName().endsWith(".csv")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".csv");
                }
                reportGenerator.generateTicketReport(fileToSave.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Laporan Tiket berhasil disimpan!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal menyimpan laporan: " + e.getMessage());
            }
        }
    }

    private void clearForm() {
        txtTicketID.setText("");
        cmbFlightCode.setSelectedIndex(0);
        txtCustomerName.setText("");
        txtTicketCount.setText("");
        txtPrice.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicketManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicketManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicketManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicketManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicketManagementFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFlightForm;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTransactionForm;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbFlightCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTable ticketTable;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtTicketCount;
    private javax.swing.JTextField txtTicketID;
    // End of variables declaration//GEN-END:variables
}
