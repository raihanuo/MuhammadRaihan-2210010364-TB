package view;

import dao.FlightDAO;
import dao.TicketDAO;
import dao.TransactionDAO;
import java.io.File;
import model.Flight;
import model.Transaction;
import util.Database;
import util.ReportGenerator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.filechooser.FileNameExtensionFilter;

public class TransactionManagementFrame extends javax.swing.JFrame {
    private FlightDAO flightDao;
    private TicketDAO ticketDao;
    private TransactionDAO transactionDao;
    private ReportGenerator reportGenerator;
    private DefaultTableModel transactionTableModel;
    public TransactionManagementFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setupDatabase();
        initializeTable();
        loadTransactions();

        btnSave.addActionListener(e -> saveTransaction());
        btnUpdate.addActionListener(e -> updateTransaction());
        btnDelete.addActionListener(e -> deleteTransaction());
        btnReport.addActionListener(e -> generateTransactionReport());
        btnFlightForm.addActionListener(e -> {
            new FlightManagementFrame().setVisible(true);
            dispose();
        });
        btnTicketForm.addActionListener(e -> {
            new TicketManagementFrame().setVisible(true);
            dispose();
        });
        try {
            Connection connection = Database.getConnection();
            flightDao = new FlightDAO(connection);
            ticketDao = new TicketDAO(connection);
            loadFlightCodes();
            loadTicketIds();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menghubungkan ke database: " + e.getMessage());
        }
        this.reportGenerator = new ReportGenerator();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTransactionId = new javax.swing.JTextField();
        cmbTicketId = new javax.swing.JComboBox<>();
        cmbFlightCode = new javax.swing.JComboBox<>();
        chooserTransactionDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        transactionTable = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnFlightForm = new javax.swing.JButton();
        btnTicketForm = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Form Transaksi");

        labelTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Form Transaksi");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("ID Transaksi");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ID Tiket");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Kode Penerbangan");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Tanggal Transaksi");

        txtTransactionId.setEditable(false);
        txtTransactionId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTransactionId.setEnabled(false);

        cmbTicketId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cmbFlightCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        transactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Transaki", "ID Tiket", "Kode Penerbangan", "Tanggal Transaksi"
            }
        ));
        jScrollPane1.setViewportView(transactionTable);

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setText("Tambah");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdate.setText("Ubah");

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDelete.setText("Hapus");

        btnFlightForm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFlightForm.setText("Form Penerbangan");

        btnTicketForm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTicketForm.setText("Form Tiket");

        btnReport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnReport.setText("Laporan");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbFlightCode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooserTransactionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbTicketId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTransactionId))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReport)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnFlightForm, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTicketForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTransactionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbTicketId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbFlightCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chooserTransactionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFlightForm)
                            .addComponent(btnTicketForm)))
                    .addComponent(btnReport))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void loadTicketIds() {
        try {
            List<Integer> ticketIds = ticketDao.getAllTicketIds();
            cmbTicketId.removeAllItems();
            for (Integer ticketId : ticketIds) {
                cmbTicketId.addItem(Integer.toString(ticketId));
            }
        } catch (Exception e) {
            System.out.println("Gagal mendapatkan id tiket! " + e.getMessage());
        }
    }

    
    private void loadFlightCodes() {
        try {
            List<Flight> flights = flightDao.getAllFlightCodes();
            cmbFlightCode.removeAllItems();
            for (Flight flight : flights) {
                cmbFlightCode.addItem(flight.getFlightCode());
            }
        } catch (Exception e) {
            System.out.println("Gagal mendapatkan kode penerbangan! " + e.getMessage());
        }
    }
    
   private void setupDatabase() {
        try {
            Connection connection = Database.getConnection();
            transactionDao = new TransactionDAO(connection);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Koneksi Database Gagal: " + e.getMessage());
        }
    }

    private void initializeTable() {
        transactionTableModel = new DefaultTableModel(new String[]{"ID Transaksi", "ID Tiket", "Kode Penerbangan", "Tanggal Transaksi"}, 0);
        transactionTable.setModel(transactionTableModel);
        for (int column = 0; column < transactionTable.getColumnCount(); column++) {
            int headerWidth = transactionTable.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(transactionTable, transactionTable.getColumnName(column), false, false, 0, column)
                    .getPreferredSize().width;
            transactionTable.getColumnModel().getColumn(column).setPreferredWidth(headerWidth);
        }  
        transactionTable.getSelectionModel().addListSelectionListener(event -> {
            int selectedRow = transactionTable.getSelectedRow();
            if (selectedRow != -1) {
                String transactionId = transactionTable.getValueAt(selectedRow, 0).toString();
                String ticketId = transactionTable.getValueAt(selectedRow, 1).toString();
                String flightCode = transactionTable.getValueAt(selectedRow, 2).toString();
                String transactionDate = transactionTable.getValueAt(selectedRow, 3).toString();

                txtTransactionId.setText(transactionId);
                cmbTicketId.setSelectedItem(ticketId);
                cmbFlightCode.setSelectedItem(flightCode);
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    chooserTransactionDate.setDate(sdf.parse(transactionDate));
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void loadTransactions() {
        try {
            List<Transaction> transactions = transactionDao.getAllTransactions();
            transactionTableModel.setRowCount(0);
            for (Transaction transaction : transactions) {
                transactionTableModel.addRow(new Object[]{
                    transaction.getTransactionId(),
                    transaction.getTicketId(),
                    transaction.getFlightCode(),
                    transaction.getTransactionDate()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memuat transaksi: " + e.getMessage());
        }
    }

    private void saveTransaction() {
        try {
            if (
                cmbTicketId.getSelectedItem() == null || 
                cmbTicketId.getSelectedItem().toString().isEmpty() ||
                cmbFlightCode.getSelectedItem() == null || 
                cmbFlightCode.getSelectedItem().toString().isEmpty() ||
                chooserTransactionDate.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Semua data harus terisi sebelum menambah transaksi.", "Peringatan", JOptionPane.WARNING_MESSAGE);
                return;
            }
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String transactionDate = sdf.format(chooserTransactionDate.getDate());
            Transaction transaction = new Transaction(
                0,
                Integer.parseInt(cmbTicketId.getSelectedItem().toString()),
                cmbFlightCode.getSelectedItem().toString(),
                transactionDate
            );
            transactionDao.addTransaction(transaction);
            loadTransactions();
            JOptionPane.showMessageDialog(this, "Transaksi berhasil ditambahkan!");
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan transaksi: " + e.getMessage());
        }
    }

    private void updateTransaction() {
        int selectedRow = transactionTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin diperbarui!");
            return;
        }
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String transactionDate = sdf.format(chooserTransactionDate.getDate());
            Transaction transaction = new Transaction(
                Integer.parseInt(txtTransactionId.getText()),
                Integer.parseInt(cmbTicketId.getSelectedItem().toString()),
                cmbFlightCode.getSelectedItem().toString(),
                transactionDate
            );
            transactionDao.updateTransaction(transaction);
            loadTransactions();
            JOptionPane.showMessageDialog(this, "Transaksi berhasil diperbarui!");
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal memperbarui transaksi: " + e.getMessage());
        }
    }

    private void deleteTransaction() {
        int selectedRow = transactionTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih transaksi yang ingin dihapus!");
            return;
        }
        try {
            int transactionId = Integer.parseInt(transactionTableModel.getValueAt(selectedRow, 0).toString());
            transactionDao.deleteTransaction(transactionId);
            loadTransactions();
            JOptionPane.showMessageDialog(this, "Transaksi berhasil dihapus!");
            clearForm();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus transaksi: " + e.getMessage());
        }
    }

    private void generateTransactionReport() {
        if (transactionTableModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada transaksi untuk disimpan ke laporan.", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih Lokasi untuk Menyimpan Laporan Transaksi");
        
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));
        fileChooser.setSelectedFile(new File("laporan_transaksi"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                if (!fileToSave.getName().endsWith(".csv")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".csv");
                }
                reportGenerator.generateTransactionReport(fileToSave.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Laporan Transaksi berhasil disimpan!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal menyimpan laporan: " + e.getMessage());
            }
        }
    }

    private void clearForm() {
        txtTransactionId.setText("");
        cmbTicketId.setSelectedIndex(0);
        cmbFlightCode.setSelectedIndex(0);
        chooserTransactionDate.setDate(null);
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionManagementFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransactionManagementFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFlightForm;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTicketForm;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser chooserTransactionDate;
    private javax.swing.JComboBox<String> cmbFlightCode;
    private javax.swing.JComboBox<String> cmbTicketId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTable transactionTable;
    private javax.swing.JTextField txtTransactionId;
    // End of variables declaration//GEN-END:variables
}
